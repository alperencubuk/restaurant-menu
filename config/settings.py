"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from datetime import timedelta
from os import getenv
from pathlib import Path

from config.utils import str_to_bool, str_to_tuple

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-tq!y_+eu#%n7e%jm6($!_qwyb4=riyg6hf51i-$6@8rc01g)f="

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = str_to_bool(getenv("DEBUG", "False"))

ALLOWED_HOSTS = str_to_tuple(getenv("ALLOWED_HOSTS", "*"))
CSRF_TRUSTED_ORIGINS = str_to_tuple(
    getenv("CSRF_TRUSTED_ORIGINS", "http://localhost:3000")
)

# Application definition

INSTALLED_APPS = [
    "whitenoise.runserver_nostatic",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_filters",
    "drf_spectacular",
    "phonenumber_field",
    "rest_framework",
    "rest_framework_simplejwt",
    "apps.app",
    "apps.auth",
    "apps.qr",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "config.middlewares.RequestLogMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": getenv("POSTGRES_DB", "database"),
        "USER": getenv("POSTGRES_USER", "user"),
        "PASSWORD": getenv("POSTGRES_PASSWORD", "password"),
        "HOST": getenv("POSTGRES_HOST", "postgres"),
        "PORT": getenv("POSTGRES_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = getenv("TIME_ZONE", "Europe/Istanbul")

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.OrderingFilter",
    ),
    "DEFAULT_PAGINATION_CLASS": "config.core.Pagination",
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "Restaurant Menu API",
    "DESCRIPTION": "Manage your restaurant menu",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SWAGGER_UI_SETTINGS": {
        "tagsSorter": "alpha",
    },
}

PHONENUMBER_DEFAULT_REGION = getenv("PHONENUMBER_DEFAULT_REGION", "TR")

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(
        minutes=int(getenv("ACCESS_TOKEN_LIFETIME_MINUTES", 60))
    ),
    "REFRESH_TOKEN_LIFETIME": timedelta(
        days=int(getenv("REFRESH_TOKEN_LIFETIME_DAYS", 30))
    ),
    "UPDATE_LAST_LOGIN": True,
    "ROTATE_REFRESH_TOKENS": True,
}

ADMIN_USERNAME = getenv("ADMIN_USERNAME", "admin")
ADMIN_EMAIL = getenv("ADMIN_EMAIL", "admin@admin.admin")
ADMIN_PASSWORD = getenv("ADMIN_PASSWORD", "admin")

REQUEST_LOGGING_ENABLED = str_to_bool(getenv("REQUEST_LOGGING_ENABLED", "False"))
REQUEST_LOGGING_INCLUDE_PATHS = str_to_tuple(
    getenv("REQUEST_LOGGING_INCLUDE_PATHS", "/api")
)
REQUEST_LOGGING_EXCLUDE_PATHS = str_to_tuple(
    getenv("REQUEST_LOGGING_EXCLUDE_PATHS", "/api/schema,/api/docs")
)

LOG_LEVEL = getenv("LOG_LEVEL", "WARNING")
DJANGO_LOG_LEVEL = getenv("DJANGO_LOG_LEVEL", "ERROR")
DJANGO_DB_LOG_LEVEL = getenv("DJANGO_DB_LOG_LEVEL", "ERROR")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"class": "logging.StreamHandler", "formatter": "default"},
    },
    "formatters": {
        "default": {
            "format": "({asctime}) ({levelname}) ({module}) {message}",
            "datefmt": "%Y-%m-%d %H:%M:%S",
            "style": "{",
        },
    },
    "root": {"handlers": ("console",), "level": LOG_LEVEL},
    "loggers": {
        "django": {
            "handlers": ("console",),
            "level": DJANGO_LOG_LEVEL,
        },
        "django.db.backends": {
            "handlers": ("console",),
            "level": DJANGO_DB_LOG_LEVEL,
        },
    },
}
